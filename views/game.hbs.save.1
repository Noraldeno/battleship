<div class="container">
  <div class="row mb-3">
    <div class="col">
      <h1>Player 1:{{#if }}</h1>
    </div>
    <div class="col">
      <h1>Player 2:</h1>
    </div>
  </div>
  <div class="row">
    <div id="gameboard">
    </div>

    <div class="col">
      <table class="table table-dark select-ships mt-5">
        <tr><th><h2>Select Ships</h2></th></tr>
        <tr>
          <td class="destroyer-container">Destroyer<span id="destroyer-ready" class="ml-2" style="font-size:36px;"></span></td>
          <td><button class="btn btn-primary" id="destroyer-horizontal">Horizontal</button></td>
          <td><button class="btn btn-primary" id="destroyer-vertical">Vertical</button></td>
        </tr>
        <tr>
          <td class="submarine-container">Submarine<span id="submarine-ready" class="ml-2" style="font-size:36px;"></span></td>
          <td><button class="btn btn-primary" id="submarine-horizontal">Horizontal</button></td>
          <td><button class="btn btn-primary" id="submarine-vertical">Vertical</button></td>
        </tr>
        <tr>
          <td class="cruiser-container">Cruiser<span id="cruiser-ready" class="ml-2" style="font-size:36px;"></span></td>
          <td><button class="btn btn-primary" id="cruiser-horizontal">Horizontal</button></td>
          <td><button class="btn btn-primary" id="cruiser-vertical">Vertical</button></td>
        </tr>
        <tr>
          <td class="battleship-container">Battleship<span id="battleship-ready" class="ml-2" style="font-size:36px;"></span></td>
          <td><button class="btn btn-primary" id="battleship-horizontal">Horizontal</button></td>
          <td><button class="btn btn-primary" id="battleship-vertical">Vertical </button></td>
        </tr>
        <tr>
          <td class="carrier-container">Carrier<span id="carrier-ready" class="ml-2" style="font-size:36px;"></span></td>
          <td><button class="btn btn-primary" id="carrier-horizontal">Horizontal</button></td>
          <td><button class="btn btn-primary" id="carrier-vertical">Vertical</button></td>
        </tr>
        <tr>
          <td></td>
          <td><button class="btn btn-danger" id="reset">Reset</button></td>
          <td><button class="btn btn-success" id="ready">Ready</button></td>
        </tr>
      </table>

    </div>

  </div>
</div>

<script>
  createGameBoard(10);
  let positions = [];
  // Destroyer
  let destroyerHorizontal = document.getElementById('destroyer-horizontal');
  destroyerHorizontal.addEventListener('click', () => {
    destroyerHorizontal.setAttribute('data-orientation', 'horizontal');
    destroyerHorizontal.setAttribute('data-ship', 'destroyer');
    destroyerHorizontal.setAttribute('data-selected', '');
  });

  let destroyerVertical = document.getElementById('destroyer-vertical');
  destroyerVertical.addEventListener('click', () => {
    destroyerHorizontal.setAttribute('data-orientation', 'vertical');
    destroyerHorizontal.setAttribute('data-ship', 'destroyer');
    destroyerHorizontal.setAttribute('data-selected', '');
  });

  //Submarine
  let submarineHorizontal = document.getElementById('submarine-horizontal');
  submarineHorizontal.addEventListener('click', () => {
    submarineHorizontal.setAttribute('data-orientation', 'horizontal');
    submarineHorizontal.setAttribute('data-ship', 'submarine');
    submarineHorizontal.setAttribute('data-selected', '');
  })

  let submarineVertical = document.getElementById('submarine-vertical');
  submarineVertical.addEventListener('click', () => {
    submarineVertical.setAttribute('data-orientation', 'vertical');
    submarineVertical.setAttribute('data-ship', 'submarine');
    submarineVertical.setAttribute('data-selected', '');
  })

  //Cruiser
  let cruiserHorizontal = document.getElementById('cruiser-horizontal');
  cruiserHorizontal.addEventListener('click', () => {
    cruiserHorizontal.setAttribute('data-orientation', 'horizontal');
    cruiserHorizontal.setAttribute('data-ship', 'cruiser');
    cruiserHorizontal.setAttribute('data-selected', '');
  })

  let cruiserVertical = document.getElementById('cruiser-vertical');
  cruiserVertical.addEventListener('click', () => {
    cruiserVertical.setAttribute('data-orientation', 'vertical');
    cruiserVertical.setAttribute('data-ship', 'cruiser');
    cruiserVertical.setAttribute('data-selected', '');
  })

  //Battleshikp
  let battleshipHorizontal = document.getElementById('battleship-horizontal');
  battleshipHorizontal.addEventListener('click', () => {
    battleshipHorizontal.setAttribute('data-orientation', 'horizontal');
    battleshipHorizontal.setAttribute('data-ship', 'battleship');
    battleshipHorizontal.setAttribute('data-selected', '');
  })

  let battleshipVertical = document.getElementById('battleship-vertical');
  battleshipVertical.addEventListener('click', () => {
    battleshipVertical.setAttribute('data-orientation', 'vertical');
    battleshipVertical.setAttribute('data-ship', 'battleship');
    battleshipVertical.setAttribute('data-selected', '');
  })

  //Carrier
  let carrierHorizontal = document.getElementById('carrier-horizontal');
  carrierHorizontal.addEventListener('click', () => {
    carrierHorizontal.setAttribute('data-orientation', 'horizontal');
    carrierHorizontal.setAttribute('data-ship', 'carrier');
    carrierHorizontal.setAttribute('data-selected', '');
  })

  let carrierVertical = document.getElementById('carrier-vertical');
  carrierVertical.addEventListener('click', () => {
    carrierVertical.setAttribute('data-orientation', 'vertical');
    carrierVertical.setAttribute('data-ship', 'carrier');
    carrierVertical.setAttribute('data-selected', '');
  })

  let cells = document.getElementsByClassName("cell");

  [].forEach.call(cells, (cell) => {
    cell.addEventListener('click', (e) => {
      if (!(document.querySelector('[data-selected]') === null)) {
        let selected = document.querySelector('[data-selected]');
        let shipOrientation = selected.getAttribute('data-orientation');
        let shipType = selected.getAttribute('data-ship');
        let currentPosition = parseInt(cell.getAttribute('data-position'));
        let shipLength = 0;

        switch (shipType) {
          case 'destroyer':
            shipLength = 2;
            let destroyerReady = document.getElementById('destroyer-ready');
            destroyerReady.innerHTML = '&#10004;';
            break;

          case 'submarine':
            shipLength = 3;
            let submarineReady = document.getElementById('submarine-ready');
            submarineReady.innerHTML = '&#10004;';
            break;

          case 'cruiser':
            shipLength = 3;
            let cruiserReady = document.getElementById('cruiser-ready');
            cruiserReady.innerHTML = '&#10004;';
            break;

          case 'battleship':
            shipLength = 4;
            let battleshipReady = document.getElementById('battleship-ready');
            battleshipReady.innerHTML = '&#10004;';
            break;

          case 'carrier':
            shipLength = 5;
            let carrierReady = document.getElementById('carrier-ready');
            carrierReady.innerHTML = '&#10004;';
            break;
          default:
        }

        switch (shipOrientation) {
          case 'horizontal':

            for (let i = 0; i < shipLength; i++) {
              cells[currentPosition].style.backgroundColor = 'red';
              positions.push(currentPosition);
              currentPosition++;
            }
            console.log(positions);
            selected.removeAttribute('data-selected');

            break;

          case 'vertical':
            for (let i = 0; i < shipLength; i++) {
              cells[currentPosition].style.backgroundColor = 'red';
              positions.push(currentPosition);
              currentPosition += 10;
            }
            console.log(positions);
            selected.removeAttribute('data-selected');
            break;
        }
      }

    });

    cell.addEventListener('mouseover', () => {
      if (!(document.querySelector('[data-selected]') === null)) {
        let selected = document.querySelector('[data-selected]');
        let shipOrientation = selected.getAttribute('data-orientation');
        let shipType = selected.getAttribute('data-ship');
        let currentPosition = parseInt(cell.getAttribute('data-position'));
        let shipLength = 0;

        switch (shipType) {
          case 'destroyer':
            shipLength = 2;
            break;

          case 'submarine':
            shipLength = 3;
            break;

          case 'cruiser':
            shipLength = 3;
            break;

          case 'battleship':
            shipLength = 4;
            break;

          case 'carrier':
            shipLength = 5;
            break;
          default:
        }

        switch (shipOrientation) {
          case 'horizontal':

            for (let i = 0; i < shipLength; i++) {
              if(cells[currentPosition] != undefined){
                cells[currentPosition].style.backgroundColor = 'red';
              }
              currentPosition++;
            }

            break;

          case 'vertical':
            for (let i = 0; i < shipLength; i++) {
              if(cells[currentPosition] != undefined){
                    cells[currentPosition].style.backgroundColor = 'red';
              }
              currentPosition += 10;
            }

            break;
        }
      }

      cell.addEventListener('mouseout', () => {
        if (!(document.querySelector('[data-selected]') === null)) {
          let selected = document.querySelector('[data-selected]');
          let shipOrientation = selected.getAttribute('data-orientation');
          let shipType = selected.getAttribute('data-ship');
          let currentPosition = parseInt(cell.getAttribute('data-position'));
          let shipLength = 0;

          switch (shipType) {
            case 'destroyer':
              shipLength = 2;
              break;

            case 'submarine':
              shipLength = 3;
              break;

            case 'cruiser':
              shipLength = 3;
              break;

            case 'battleship':
              shipLength = 4;
              break;

            case 'carrier':
              shipLength = 5;
              break;
            default:
          }

          switch (shipOrientation) {
            case 'horizontal':

              for (let i = 0; i < shipLength; i++) {
                if (!positions.includes(currentPosition)) {
                  if(cells[currentPosition] != undefined){
                    cells[currentPosition].style.backgroundColor = 'white';
                  }
                }
                currentPosition++;
              }

              break;

            case 'vertical':
              for (let i = 0; i < shipLength; i++) {
                if (!positions.includes(currentPosition)) {
                  if(cells[currentPosition] != undefined){
                    cells[currentPosition].style.backgroundColor = 'white';
                  }
                }
                currentPosition += 10;
              }

              break;
          }
        }

      });
    });
  });

  let resetButton = document.getElementById('reset');
  resetButton.addEventListener('click', ()=>{
    positions = [];
    [].forEach.call(cells, (cell)=>{
      cell.style.backgroundColor = 'white';
    })

    let destroyerReady = document.getElementById('destroyer-ready');
    destroyerReady.innerHTML = '';

    let submarineReady = document.getElementById('submarine-ready');
    submarineReady.innerHTML = '';

    let cruiserReady = document.getElementById('cruiser-ready');
    cruiserReady.innerHTML = '';

    let battleshipReady = document.getElementById('battleship-ready');
    battleshipReady.innerHTML = '';

    let carrierReady = document.getElementById('carrier-ready');
    carrierReady.innerHTML = '';
  })


  //Creates a gameboard of input size
  //Each cell has of a class of 'cell' and 'data-position'
  function createGameBoard(size) {
    let main = document.getElementById('gameboard');
    let count = 0;
    let gameboard = document.createElement('table');
    gameboard.setAttribute('id', 'gameboard');

    //creates the letters on top of game board A -> J
    let firstRow = document.createElement('tr');
    let emptyCell = document.createElement('th');
    firstRow.appendChild(emptyCell);
    let alphaIndex = 65;

    for (let i = 0; i < 10; i++) {
      let letterList = document.createElement('th');
      letterList.setAttribute('class', 'text-center');
      letterList.innerHTML = '&#' + alphaIndex++;
      firstRow.appendChild(letterList);
      gameboard.appendChild(firstRow);
    }

    // creates the numbers on side and cells
    for (let i = 0; i < size; i++) {
      let row = document.createElement('tr');
      let numList = document.createElement('th');
      let index = i + 1;
      numList.innerHTML = index;
      row.appendChild(numList);

      for (let k = 0; k < size; k++) {
        let cell = document.createElement('td');
        cell.setAttribute('data-position', count++);
        cell.setAttribute('class', 'cell');
        row.appendChild(cell);
      }

      gameboard.appendChild(row);
    }

    main.appendChild(gameboard);
  }
</script>
